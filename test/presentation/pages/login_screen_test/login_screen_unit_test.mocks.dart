// Mocks generated by Mockito 5.4.0 from annotations
// in validator/test/presentation/pages/login_screen_test/login_screen_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i8;
import 'package:validator/domain/entities/credentials.dart' as _i6;
import 'package:validator/domain/entities/event.dart' as _i3;
import 'package:validator/domain/entities/token.dart' as _i2;
import 'package:validator/domain/services/auth_service_interface.dart' as _i4;
import 'package:validator/domain/services/event_service_interface.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToken_0 extends _i1.SmartFake implements _i2.Token {
  _FakeToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEvent_1 extends _i1.SmartFake implements _i3.Event {
  _FakeEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAuthService].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockIAuthService extends _i1.Mock implements _i4.IAuthService {
  MockIAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Token> login(_i6.Credentials? credentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [credentials],
        ),
        returnValue: _i5.Future<_i2.Token>.value(_FakeToken_0(
          this,
          Invocation.method(
            #login,
            [credentials],
          ),
        )),
      ) as _i5.Future<_i2.Token>);
}

/// A class which mocks [IEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIEventService extends _i1.Mock implements _i7.IEventService {
  MockIEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Event>> getEvents() => (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);
  @override
  _i5.Future<_i3.Event> getEventById(int? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [eventId],
        ),
        returnValue: _i5.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #getEventById,
            [eventId],
          ),
        )),
      ) as _i5.Future<_i3.Event>);
  @override
  _i5.Future<List<_i3.Event>> getFavouriteEventsByUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavouriteEventsByUserId,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);
  @override
  _i5.Future<List<_i3.Event>> getEventsByOrganizationId(int? organizationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsByOrganizationId,
          [organizationId],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);
  @override
  _i5.Future<_i3.Event> createEvent(_i3.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [event],
        ),
        returnValue: _i5.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #createEvent,
            [event],
          ),
        )),
      ) as _i5.Future<_i3.Event>);
  @override
  _i5.Future<_i3.Event> updateEventById(
    int? eventId,
    _i3.Event? updatedEvent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventById,
          [
            eventId,
            updatedEvent,
          ],
        ),
        returnValue: _i5.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #updateEventById,
            [
              eventId,
              updatedEvent,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Event>);
  @override
  _i5.Future<void> deleteEventById(int? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteEventById,
          [eventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteEventsByOrganizationId(int? organizationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEventsByOrganizationId,
          [organizationId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllEvents,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i8.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);
  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);
  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);
  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);
  @override
  _i5.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
